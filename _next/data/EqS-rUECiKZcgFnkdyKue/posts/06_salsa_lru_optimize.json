{"pageProps":{"postData":{"id":"06_salsa_lru_optimize","contentHtml":"<p>reivew <a href=\"https://github.com/salsa-rs/salsa/pull/371\">#371</a> 加深了我对 salsa 做 recomputation 的理解。</p>\n<p>我们先来看一个测试，思考这个测试能否 pass</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-meta\">#[salsa::tracked(jar = Jar, lru = 3)]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_hot_potato</span>(db: &#x26;<span class=\"hljs-keyword\">dyn</span> Db, input: MyInput) <span class=\"hljs-punctuation\">-></span> Arc&#x3C;HotPotato> {\n    db.<span class=\"hljs-title function_ invoke__\">push_log</span>(<span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"get_hot_potato({:?})\"</span>, input.<span class=\"hljs-title function_ invoke__\">field</span>(db)));\n    Arc::<span class=\"hljs-title function_ invoke__\">new</span>(HotPotato::<span class=\"hljs-title function_ invoke__\">new</span>(input.<span class=\"hljs-title function_ invoke__\">field</span>(db)))\n}\n\n<span class=\"hljs-meta\">#[salsa::tracked(jar = Jar)]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">get_hot_potato2</span>(db: &#x26;<span class=\"hljs-keyword\">dyn</span> Db, input: MyInput) <span class=\"hljs-punctuation\">-></span> <span class=\"hljs-type\">u32</span> {\n    db.<span class=\"hljs-title function_ invoke__\">push_log</span>(<span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"get_hot_potato2({:?})\"</span>, input.<span class=\"hljs-title function_ invoke__\">field</span>(db)));\n    <span class=\"hljs-title function_ invoke__\">get_hot_potato</span>(db, input).<span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">lru_keeps_dependency_info</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">db</span> = Database::<span class=\"hljs-title function_ invoke__\">default</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">capacity</span> = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-comment\">// Invoke `get_hot_potato2` 33 times. This will (in turn) invoke</span>\n    <span class=\"hljs-comment\">// `get_hot_potato`, which will trigger LRU after 32 executions.</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">inputs</span>: <span class=\"hljs-type\">Vec</span>&#x3C;MyInput> = (<span class=\"hljs-number\">0</span>..(capacity + <span class=\"hljs-number\">1</span>))\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|i| MyInput::<span class=\"hljs-title function_ invoke__\">new</span>(&#x26;<span class=\"hljs-keyword\">mut</span> db, i <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>))\n        .<span class=\"hljs-title function_ invoke__\">collect</span>();\n\n    <span class=\"hljs-title function_ invoke__\">for</span> (i, input) <span class=\"hljs-keyword\">in</span> inputs.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">x</span> = <span class=\"hljs-title function_ invoke__\">get_hot_potato2</span>(&#x26;db, *input);\n        <span class=\"hljs-built_in\">assert_eq!</span>(x <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>, i);\n    }\n\n    db.<span class=\"hljs-title function_ invoke__\">salsa_runtime_mut</span>()\n        .<span class=\"hljs-title function_ invoke__\">synthetic_write</span>(salsa::Durability::HIGH);\n\n    <span class=\"hljs-comment\">// We want to test that calls to `get_hot_potato2` are still considered</span>\n    <span class=\"hljs-comment\">// clean. Check that no new executions occur as we go here.</span>\n    db.<span class=\"hljs-title function_ invoke__\">assert_logs_len</span>((capacity + <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">2</span>);\n\n    <span class=\"hljs-comment\">// calling `get_hot_potato2(0)` has to check that `get_hot_potato(0)` is still valid;</span>\n    <span class=\"hljs-comment\">// even though we've evicted it (LRU), we find that it is still good</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">p</span> = <span class=\"hljs-title function_ invoke__\">get_hot_potato2</span>(&#x26;db, *inputs.<span class=\"hljs-title function_ invoke__\">first</span>().<span class=\"hljs-title function_ invoke__\">unwrap</span>());\n    <span class=\"hljs-built_in\">assert_eq!</span>(p, <span class=\"hljs-number\">0</span>);\n    db.<span class=\"hljs-title function_ invoke__\">assert_logs_len</span>(<span class=\"hljs-number\">0</span>);\n}\n</code></pre>\n<p>这个测试是要做什么？</p>\n<p>为了方便，将 <code>get_hot_potato</code> 记为 <code>get</code>，<code>get_hot_potato2</code> 记为 <code>get2</code>。</p>\n<p>我们有两个 tracked function：<code>get</code> 和 <code>get2</code>，不用关心这两个 function 做了啥，只需要知道\n<code>get2</code> 调用了 <code>get</code>，也就是说 <code>get2</code> 依赖 <code>get</code> 的结果。另一个需要注意的点是 <code>get</code> 设置了 <code>lru = 3</code>，而 <code>get2</code> 没有设置 lru。</p>\n<p>现在调用 get2 四次，来看看 salsa 内部的状态，<code>get</code> 并没有存储 input 为 0 的结果，因为它设置了\n<code>lru = 3</code>，input 为 0 的结果被 evict 了。</p>\n<pre><code class=\"hljs language-lua\">+<span class=\"hljs-comment\">-------+----------------+-----------------+</span>\n| <span class=\"hljs-built_in\">input</span> |       get      |       get2      |\n+<span class=\"hljs-comment\">-------+----------------+-----------------+</span>\n|   <span class=\"hljs-number\">0</span>   |                |        <span class=\"hljs-number\">0</span>        |\n+<span class=\"hljs-comment\">-------+----------------+-----------------+</span>\n|   <span class=\"hljs-number\">1</span>   |        <span class=\"hljs-number\">1</span>       |        <span class=\"hljs-number\">1</span>        |\n+<span class=\"hljs-comment\">-------+----------------+-----------------+</span>\n|   <span class=\"hljs-number\">2</span>   |        <span class=\"hljs-number\">2</span>       |        <span class=\"hljs-number\">2</span>        |\n+<span class=\"hljs-comment\">-------+----------------+-----------------+</span>\n|   <span class=\"hljs-number\">3</span>   |        <span class=\"hljs-number\">3</span>       |        <span class=\"hljs-number\">3</span>        |\n+<span class=\"hljs-comment\">-------+----------------+-----------------+</span>\n</code></pre>\n<p>我们现在调用 <code>get2(0)</code>（这里应该写 <code>input0</code> 会比较好，<code>input0 = MyInput::new(&#x26;mut db, 0)</code>，但为了简单就写了 0），\n能直接用 salsa 存储的结果吗？还需要重新计算吗？显然不用，不是存储有吗？那如果现在有别的输入改变了 salsa 的 <code>current_revision</code> 呢?\n<code>synthetic_write</code> 就是在做这件事。也就是说 salsa 的 <code>current_revision</code> 大于 <code>get</code> 和 <code>get2</code> 结果被 verify\n的 revision。这意味着 <a href=\"https://github.com/salsa-rs/salsa/blob/d3f0077d212d76ae81e6df0b7614ece9df469ed0/components/salsa-2022/src/function/maybe_changed_after.rs#L107-L135\">shallow_verify_memo</a> 不能确定 <code>get2(0)</code> 的结果是否能用，得让 <a href=\"https://github.com/salsa-rs/salsa/blob/d3f0077d212d76ae81e6df0b7614ece9df469ed0/components/salsa-2022/src/function/maybe_changed_after.rs#L145-L202\">deep_verify_memo</a>\n去进一步判断。<code>deep_verify_memo</code> 会检查 <code>get2(0)</code> 依赖的其他计算结果有没有改变，所以会去查看 <code>get(0)</code>，\n发现压根儿没有存储 <code>get(0)</code> 的结果，当然也没法判断它有没有改变，只能保守地认为发生了改变，所以 <code>get2(0)</code> 和\n<code>get(0)</code> 都会重新计算。</p>\n<p>显然，这不够好，实际上 <code>get2(0)</code> 的结果是可以重用的，因为 <code>get(0)</code> 的结果虽然被 evict 了，但并没有发生改变。\n<strong>在我们这个场景下，<code>get2(0)</code> 并不关心 <code>get(0)</code> 的结果是多少，只关心从它上次被 verify 后有没有发生改变</strong>。</p>\n<p>有没有方法去优化它呢？<a href=\"https://github.com/salsa-rs/salsa/pull/371\">#371</a> 提供了一种解决方案。我们 evict 的时候，不再直接删除整个 <code>Memo</code>，只是把 <code>Memo.value</code> 设置为 <code>None</code>，保留\n<code>verified_at</code> 和 <code>revisions</code>。</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-comment\">/// Evicts the existing memo for the given key, replacing it</span>\n<span class=\"hljs-comment\">/// with an equivalent memo that has no value. If the memo is untracked, BaseInput, </span>\n<span class=\"hljs-comment\">/// or has values assigned as output of another query, this has no effect.</span>\n<span class=\"hljs-title function_ invoke__\">pub</span>(<span class=\"hljs-keyword\">super</span>) <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">evict</span>(&#x26;<span class=\"hljs-keyword\">self</span>, key: K) {\n    <span class=\"hljs-keyword\">use</span> dashmap::mapref::entry::Entry::*;\n    <span class=\"hljs-keyword\">use</span> crate::runtime::local_state::QueryOrigin;\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">Occupied</span>(entry )=  <span class=\"hljs-keyword\">self</span>.map.<span class=\"hljs-title function_ invoke__\">entry</span>(key) {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">memo</span> = entry.<span class=\"hljs-title function_ invoke__\">get</span>().<span class=\"hljs-title function_ invoke__\">load</span>();\n        <span class=\"hljs-keyword\">match</span> memo.revisions.origin {\n            QueryOrigin::<span class=\"hljs-title function_ invoke__\">Assigned</span>(_)\n            | QueryOrigin::<span class=\"hljs-title function_ invoke__\">DerivedUntracked</span>(_)\n            | QueryOrigin::BaseInput\n            | QueryOrigin::Field => {\n                <span class=\"hljs-comment\">// Careful: Cannot evict memos whose values were</span>\n                <span class=\"hljs-comment\">// assigned as output of another query</span>\n                <span class=\"hljs-comment\">// or those with untracked inputs</span>\n                <span class=\"hljs-comment\">// as their values cannot be reconstructed.</span>\n                <span class=\"hljs-keyword\">return</span>;\n            },\n            \n            QueryOrigin::<span class=\"hljs-title function_ invoke__\">Derived</span>(_) => {\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">memo_evicted</span> = Arc::<span class=\"hljs-title function_ invoke__\">new</span>(Memo::<span class=\"hljs-title function_ invoke__\">new</span>(\n                    None::&#x3C;V>,\n                    memo.verified_at.<span class=\"hljs-title function_ invoke__\">load</span>(),\n                    memo.revisions.<span class=\"hljs-title function_ invoke__\">clone</span>(),\n                ));\n\n                entry.<span class=\"hljs-title function_ invoke__\">get</span>().<span class=\"hljs-title function_ invoke__\">store</span>(memo_evicted);\n            }\n        }\n    }\n}\n</code></pre>","title":"Salsa: LRU needs keep dependency info","date":"2022-08-23"}},"__N_SSG":true}