{"pageProps":{"postData":{"id":"14_salsa_red_green_algorithm","contentHtml":"<pre><code class=\"hljs language-rust\"><span class=\"hljs-meta\">#[salsa::input]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">MyInput</span> {\n    field: <span class=\"hljs-type\">u32</span>,\n}\n\n<span class=\"hljs-meta\">#[salsa::tracked]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">tracked_fn</span>(db: &#x26;Db, input: MyInput) <span class=\"hljs-punctuation\">-></span> <span class=\"hljs-type\">u32</span> {\n    <span class=\"hljs-title function_ invoke__\">some_slow_fn</span>(input.<span class=\"hljs-title function_ invoke__\">field</span>(db))\n}\n</code></pre>\n<p>If the <code>input</code> isn't changed, the second call to <code>tracked_fn</code> doesn't need to recompute the result. But if the <code>input</code> is changed, no matter how small the change is and whether it affects the final result, the tracked struct is invalidated. This is not what we want. Even if the <code>input</code> is changed, we may benefit from the previous computation by reusing intermediate results to speed up this one. Take the compiler as an example, if we just add a space or a comment, the AST is not changed, all the following analysis can reuse the previous results.</p>\n<p>What if we add some tracked functions to compute the intermediate results?</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-meta\">#[salsa::input]</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">MyInput</span> {\n    field: <span class=\"hljs-type\">u32</span>,\n}\n\n<span class=\"hljs-meta\">#[salsa::tracked]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">final_result</span>(db: &#x26;Db, input: MyInput) <span class=\"hljs-punctuation\">-></span> <span class=\"hljs-type\">u32</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">res1</span> = <span class=\"hljs-title function_ invoke__\">intermediate_result1</span>(input);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">res2</span> = <span class=\"hljs-title function_ invoke__\">intermediate_restul2</span>(res1);\n    ...\n}\n\n<span class=\"hljs-meta\">#[salsa::tracked]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">intermediate_result1</span>(db: &#x26;Db, input: MyInput) <span class=\"hljs-punctuation\">-></span> <span class=\"hljs-type\">u32</span> {\n    ...\n} \n\n<span class=\"hljs-meta\">#[salsa::tracked]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">intermediate_result2</span>(db: &#x26;Db, input: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-></span> <span class=\"hljs-type\">u32</span> {\n    ...\n}\n</code></pre>","title":"WIP: Salsa: The red green algorithm","date":"2022-12-23"}},"__N_SSG":true}