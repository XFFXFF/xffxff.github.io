{"pageProps":{"postData":{"id":"redis_deployment","contentHtml":"<p>背景是这样的，项目的测试环境需要 redis，对于测试环境来说，redis 的高可用性要求不高，所以就想着部署一个单节点的 redis，但在网上逛了一圈，发现教程都是部署 redis-cluster 的，看起来比较麻烦，所以我就想着不如从零开始使用 k8s YAML 文件的方式部署一个单节点的 redis。此文就是记录这个过程。</p>\n<h2>创建 deployment</h2>\n<pre><code class=\"hljs language-bash\">kubectl create deployment my-redis --image=redis:latest --dry-run=client -o yaml > deployment.yaml \n</code></pre>\n<p>以上命令会生成一个 deployment.yaml 文件，内容如下：</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">creationTimestamp:</span> <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">my-redis</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">my-redis</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">matchLabels:</span>\n      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">my-redis</span>\n  <span class=\"hljs-attr\">strategy:</span> {}\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">creationTimestamp:</span> <span class=\"hljs-literal\">null</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">my-redis</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">redis:latest</span>\n        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">redis</span>\n        <span class=\"hljs-attr\">resources:</span> {}\n<span class=\"hljs-attr\">status:</span> {}\n</code></pre>\n<p><code>--image=redis:latest</code> 指定了使用的镜像，<code>--dry-run=client</code> 和 <code>-o yaml</code> 参数是为了生成 yaml 文件，而不是直接创建 deployment，如果不加这两个参数，会直接在 k8s 中创建 deployment。</p>\n<h2>暴露服务</h2>\n<p>我们需要将 redis 服务暴露出来，这样才能在集群上的其他 pod 中或者公司内网中访问到 redis 服务。这里使用 LoadBalancer 类型的 service。上一节中我们创建的 deployment 的名字是 my-redis，redis 默认的端口是 6379，所以我们可以使用以下命令创建 service：</p>\n<pre><code class=\"hljs language-bash\">kubectl expose deployment my-redis --port 6379 --target-port 6379 --name=my-redis-service --<span class=\"hljs-built_in\">type</span>=LoadBalancer --dry-run=client -o yaml > service.yaml\n</code></pre>\n<p>以上命令会生成一个 service.yaml 文件，内容如下：</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">creationTimestamp:</span> <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-attr\">labels:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">my-redis</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">my-redis-service</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">ports:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span>\n    <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span>\n    <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">6379</span>\n  <span class=\"hljs-attr\">selector:</span>\n    <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">my-redis</span>\n  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">LoadBalancer</span>\n<span class=\"hljs-attr\">status:</span>\n  <span class=\"hljs-attr\">loadBalancer:</span> {}\n\n</code></pre>\n<h2>让 deployment 和 service 生效</h2>\n<pre><code class=\"hljs language-bash\">kubectl apply -f deployment.yaml\nkubectl apply -f service.yaml\n</code></pre>\n<p>或者</p>\n<pre><code class=\"hljs language-bash\">kubectl apply -f . <span class=\"hljs-comment\"># 一次性应用所有 yaml 文件</span>\n</code></pre>\n<p>查看 deployment 和 service 是否生效：</p>\n<pre><code class=\"hljs language-bash\">> kubectl get svc | grep my-redis\nmy-redis-service   LoadBalancer   10.244.116.225   11.1.101.115 6379:32387/TCP 2m\n\n> kubectl get pods | grep my-redis\nmy-redis-d8f7b7d64-sx87r    1/1     Running   0          14m\n</code></pre>\n<p>测试一下：</p>\n<pre><code class=\"hljs language-bash\">> redis-cli -h 11.1.101.115\n</code></pre>\n<h2>修改 redis 配置</h2>\n<p>我们现在是使用的 redis 的默认配置，但是如果我们需要修改一下配置，比如设置密码，怎么做呢？</p>\n<p>参考 <a href=\"https://hub.docker.com/_/redis\">redis docker 镜像文档</a>，我们需要将需要修改的配置文件挂载到容器中 <code>/usr/local/etc/redis/redis.conf</code> 这个路径下，然后在启动容器的时候指定配置文件的路径 <code>redis-server /usr/local/etc/redis/redis.conf</code>。</p>\n<p>我们可以使用 ConfigMap 来挂载配置文件，然后在 deployment 中指定挂载的路径，这样就可以修改 redis 的配置了。</p>\n<h3>创建 ConfigMap</h3>\n<p>首先我们在本地创建一个 redis.conf 文件，内容如下：</p>\n<pre><code class=\"hljs\">requirepass 123456\n</code></pre>\n<p>根据 redis.conf 文件创建名为 my-redis-config 的 ConfigMap</p>\n<pre><code class=\"hljs language-bash\">kubectl create configmap my-redis-config --from-file=redis.conf --dry-run=client -o yaml > configmap.yaml\n</code></pre>\n<p>以上命令会生成一个 configmap.yaml 文件，内容如下：</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>\n<span class=\"hljs-attr\">data:</span>\n  <span class=\"hljs-attr\">redis.conf:</span> <span class=\"hljs-string\">|\n    requirepass 123456\n</span><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ConfigMap</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">creationTimestamp:</span> <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">my-redis-config</span>\n</code></pre>\n<h3>修改 deployment</h3>\n<p>修改 deployment.yaml 文件，添加 volumes 和 volumeMounts 以及 command：</p>\n<pre><code class=\"hljs language-diff\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  creationTimestamp: null\n  labels:\n    app: my-redis\n  name: my-redis\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: my-redis\n  strategy: {}\n  template:\n    metadata:\n      creationTimestamp: null\n      labels:\n        app: my-redis\n    spec:\n      containers:\n      - image: redis:latest\n        name: redis\n        resources: {}\n<span class=\"hljs-addition\">+        volumeMounts:</span>\n<span class=\"hljs-addition\">+        - mountPath: /usr/local/etc/redis</span>\n<span class=\"hljs-addition\">+          name: redis-config</span>\n<span class=\"hljs-addition\">+          command: [\"redis-server\", \"/usr/local/etc/redis/redis.conf\"]</span>\n<span class=\"hljs-addition\">+      volumes:</span>\n<span class=\"hljs-addition\">+      - name: redis-config</span>\n<span class=\"hljs-addition\">+        configMap:</span>\n<span class=\"hljs-addition\">+          name: my-redis-config</span>\nstatus: {}\n</code></pre>","title":"如何在 k8s 上部署单节点的 redis","date":"2023-06-14"}},"__N_SSG":true}