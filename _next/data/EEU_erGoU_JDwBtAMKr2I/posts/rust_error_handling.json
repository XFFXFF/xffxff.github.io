{"pageProps":{"postData":{"id":"rust_error_handling","contentHtml":"<svg aria-roledescription=\"flowchart-v2\" role=\"graphics-document document\" viewBox=\"-8 -8 118.234375 215\" style=\"max-width: 118.234375px;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" id=\"mermaid-0\"><style>#mermaid-0{font-family:arial,sans-serif;font-size:16px;fill:#333;}#mermaid-0 .error-icon{fill:#552222;}#mermaid-0 .error-text{fill:#552222;stroke:#552222;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#333333;stroke:#333333;}#mermaid-0 .marker.cross{stroke:#333333;}#mermaid-0 svg{font-family:arial,sans-serif;font-size:16px;}#mermaid-0 .label{font-family:arial,sans-serif;color:#333;}#mermaid-0 .cluster-label text{fill:#333;}#mermaid-0 .cluster-label span,#mermaid-0 p{color:#333;}#mermaid-0 .label text,#mermaid-0 span,#mermaid-0 p{fill:#333;color:#333;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#ECECFF;stroke:#9370DB;stroke-width:1px;}#mermaid-0 .flowchart-label text{text-anchor:middle;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:#333333;}#mermaid-0 .edgePath .path{stroke:#333333;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#333333;fill:none;}#mermaid-0 .edgeLabel{background-color:#e8e8e8;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#e8e8e8;fill:#e8e8e8;}#mermaid-0 .labelBkg{background-color:rgba(232, 232, 232, 0.5);}#mermaid-0 .cluster rect{fill:#ffffde;stroke:#aaaa33;stroke-width:1px;}#mermaid-0 .cluster text{fill:#333;}#mermaid-0 .cluster span,#mermaid-0 p{color:#333;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:arial,sans-serif;font-size:12px;background:hsl(80, 100%, 96.2745098039%);border:1px solid #aaaa33;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#333;}#mermaid-0 :root{--mermaid-font-family:arial,sans-serif;}</style><g><marker orient=\"auto\" markerHeight=\"12\" markerWidth=\"12\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"10\" viewBox=\"0 0 10 10\" class=\"marker flowchart\" id=\"flowchart-pointEnd\"><path style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 0 L 10 5 L 0 10 z\"></path></marker><marker orient=\"auto\" markerHeight=\"12\" markerWidth=\"12\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"0\" viewBox=\"0 0 10 10\" class=\"marker flowchart\" id=\"flowchart-pointStart\"><path style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 0 5 L 10 10 L 10 0 z\"></path></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"11\" viewBox=\"0 0 10 10\" class=\"marker flowchart\" id=\"flowchart-circleEnd\"><circle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\"></circle></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5\" refX=\"-1\" viewBox=\"0 0 10 10\" class=\"marker flowchart\" id=\"flowchart-circleStart\"><circle style=\"stroke-width: 1; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" r=\"5\" cy=\"5\" cx=\"5\"></circle></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"12\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart\" id=\"flowchart-crossEnd\"><path style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\"></path></marker><marker orient=\"auto\" markerHeight=\"11\" markerWidth=\"11\" markerUnits=\"userSpaceOnUse\" refY=\"5.2\" refX=\"-1\" viewBox=\"0 0 11 11\" class=\"marker cross flowchart\" id=\"flowchart-crossStart\"><path style=\"stroke-width: 2; stroke-dasharray: 1, 0;\" class=\"arrowMarkerPath\" d=\"M 1,1 l 9,9 M 10,1 l -9,9\"></path></marker><g class=\"root\"><g class=\"clusters\"></g><g class=\"edgePaths\"><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-A LE-B\" id=\"L-A-B-0\" d=\"M38.05859375,30.496612952889254L33.854817708333336,35.08051079407438C29.651041666666668,39.6644086352595,21.243489583333332,48.83220431762975,17.039713541666668,57.582768825481544C12.8359375,66.33333333333333,12.8359375,74.66666666666667,12.8359375,78.83333333333333L12.8359375,83\"></path><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-A LE-C\" id=\"L-A-C-0\" d=\"M63.73046875,30.496612952889254L67.93424479166667,35.08051079407438C72.13802083333333,39.6644086352595,80.54557291666667,48.83220431762975,84.74934895833333,57.582768825481544C88.953125,66.33333333333333,88.953125,74.66666666666667,88.953125,78.83333333333333L88.953125,83\"></path><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-B LE-D\" id=\"L-B-D-0\" d=\"M12.8359375,116L12.8359375,120.16666666666667C12.8359375,124.33333333333333,12.8359375,132.66666666666666,16.965494791666668,141.3363012761299C21.095052083333332,150.00593588559306,29.354166666666668,159.01187177118615,33.483723958333336,163.5148397139827L37.61328125,168.0178076567792\"></path><path marker-end=\"url(#flowchart-pointEnd)\" style=\"fill:none;\" class=\"edge-thickness-normal edge-pattern-solid flowchart-link LS-C LE-D\" id=\"L-C-D-0\" d=\"M88.953125,116L88.953125,120.16666666666667C88.953125,124.33333333333333,88.953125,132.66666666666666,84.82356770833333,141.3363012761299C80.69401041666667,150.00593588559306,72.43489583333333,159.01187177118615,68.30533854166667,163.5148397139827L64.17578125,168.0178076567792\"></path></g><g class=\"edgeLabels\"><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g transform=\"translate(0, 0)\" class=\"label\"><foreignObject height=\"0\" width=\"0\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g></g><g class=\"nodes\"><g transform=\"translate(50.89453125, 16.5)\" id=\"flowchart-A-16\" class=\"node default default flowchart-label\"><rect height=\"33\" width=\"25.671875\" y=\"-16.5\" x=\"-12.8359375\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-5.3359375, -9)\" style=\"\" class=\"label\"><rect></rect><foreignObject height=\"18\" width=\"10.671875\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">A</span></div></foreignObject></g></g><g transform=\"translate(12.8359375, 99.5)\" id=\"flowchart-B-17\" class=\"node default default flowchart-label\"><rect height=\"33\" width=\"25.671875\" y=\"-16.5\" x=\"-12.8359375\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-5.3359375, -9)\" style=\"\" class=\"label\"><rect></rect><foreignObject height=\"18\" width=\"10.671875\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">B</span></div></foreignObject></g></g><g transform=\"translate(88.953125, 99.5)\" id=\"flowchart-C-19\" class=\"node default default flowchart-label\"><rect height=\"33\" width=\"26.5625\" y=\"-16.5\" x=\"-13.28125\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-5.78125, -9)\" style=\"\" class=\"label\"><rect></rect><foreignObject height=\"18\" width=\"11.5625\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">C</span></div></foreignObject></g></g><g transform=\"translate(50.89453125, 182.5)\" id=\"flowchart-D-21\" class=\"node default default flowchart-label\"><rect height=\"33\" width=\"26.5625\" y=\"-16.5\" x=\"-13.28125\" ry=\"0\" rx=\"0\" style=\"\" class=\"basic label-container\"></rect><g transform=\"translate(-5.78125, -9)\" style=\"\" class=\"label\"><rect></rect><foreignObject height=\"18\" width=\"11.5625\"><div style=\"display: inline-block; white-space: nowrap;\" xmlns=\"http://www.w3.org/1999/xhtml\"><span class=\"nodeLabel\">D</span></div></foreignObject></g></g></g></g></g></svg>\n<p>本文围绕一个例子，以用户的角度来讨论 <a href=\"https://docs.rs/anyhow/latest/anyhow/\">anyhow</a>, <a href=\"https://docs.rs/error-stack/latest/error_stack/\">error_stack</a> 解决了什么样的需求，能否给错误处理带来便利。</p>\n<blockquote>\n<p>本文的例子改编自 <a href=\"https://github.com/hashintel/hash/blob/main/libs/error-stack/README.md\">error_stack README.md</a></p>\n</blockquote>\n<h2><code>Box&#x3C;dyn std::error::Error></code></h2>\n<p>在讨论 anyhow 和 error_stack 之前，我们先来看看我们的 baseline：用 <code>Box&#x3C;dyn std::error::Error></code> 来处理错误。</p>\n<p>这是最粗暴的错误处理方式，所有的错误都被转换成了 <code>Box&#x3C;dyn std::error::Error></code>。</p>\n<p>看到下面这么大一段代码，你肯定很头疼，不过不用担心，我们并不需要阅读这段代码，你可以把自己想象成这段代码的维护者，刚接手这段代码，现在遇到一个报错，需要定位到错误的原因。你需要从报错信息入手，思考如何定位到错误的原因。</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">BoxDynError</span> = <span class=\"hljs-type\">Box</span>&#x3C;<span class=\"hljs-keyword\">dyn</span> std::error::Error>;\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">parse_experiment</span>(description: &#x26;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-></span> <span class=\"hljs-type\">Result</span>&#x3C;(<span class=\"hljs-type\">u64</span>, <span class=\"hljs-type\">u64</span>), BoxDynError> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">value</span> = description.<span class=\"hljs-title function_ invoke__\">parse</span>()?;\n\n    <span class=\"hljs-title function_ invoke__\">Ok</span>((value, <span class=\"hljs-number\">2</span> * value))\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">start_experiments</span>(\n    experiment_ids: &#x26;[<span class=\"hljs-type\">usize</span>],\n    experiment_descriptions: &#x26;[&#x26;<span class=\"hljs-type\">str</span>],\n) <span class=\"hljs-punctuation\">-></span> <span class=\"hljs-type\">Result</span>&#x3C;<span class=\"hljs-type\">Vec</span>&#x3C;<span class=\"hljs-type\">u64</span>>, BoxDynError> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">experiments</span> = experiment_ids\n        .<span class=\"hljs-title function_ invoke__\">iter</span>()\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|exp_id| {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">description</span> = <span class=\"hljs-keyword\">match</span> experiment_descriptions.<span class=\"hljs-title function_ invoke__\">get</span>(*exp_id) {\n                <span class=\"hljs-title function_ invoke__\">Some</span>(desc) => desc,\n                <span class=\"hljs-literal\">None</span> => <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_ invoke__\">Err</span>(<span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"experiment {exp_id} has no valid description\"</span>).<span class=\"hljs-title function_ invoke__\">into</span>()),\n            };\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">experiment</span> = <span class=\"hljs-title function_ invoke__\">parse_experiment</span>(description)?;\n\n            <span class=\"hljs-title function_ invoke__\">Ok</span>(<span class=\"hljs-keyword\">move</span> || experiment.<span class=\"hljs-number\">0</span> * experiment.<span class=\"hljs-number\">1</span>)\n        })\n        .collect::&#x3C;<span class=\"hljs-type\">Result</span>&#x3C;<span class=\"hljs-type\">Vec</span>&#x3C;_>, BoxDynError>>()?;\n\n    <span class=\"hljs-title function_ invoke__\">Ok</span>(experiments.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|experiment| <span class=\"hljs-title function_ invoke__\">experiment</span>()).<span class=\"hljs-title function_ invoke__\">collect</span>())\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">main</span>() <span class=\"hljs-punctuation\">-></span> <span class=\"hljs-type\">Result</span>&#x3C;(), BoxDynError> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">experiment_ids</span> = &#x26;[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">experiment_descriptions</span> = &#x26;[<span class=\"hljs-string\">\"10\"</span>, <span class=\"hljs-string\">\"20\"</span>, <span class=\"hljs-string\">\"3o\"</span>];\n    <span class=\"hljs-title function_ invoke__\">start_experiments</span>(experiment_ids, experiment_descriptions)?;\n\n    <span class=\"hljs-title function_ invoke__\">Ok</span>(())\n}\n\n</code></pre>\n<p>运行这段代码，会得到如下的错误信息：</p>\n<pre><code class=\"language-text\">Error: ParseIntError { kind: InvalidDigit }\n</code></pre>\n<p>看到这段错误信息，很难快速定位到错误的原因。我需要阅读代码，才能知道错误发生在哪里。如果要定位到错误的原因，我希望得到什么样的信息呢？\n最好有 backtrace, 帮助定位到错误发生的位置，还希望能够得到错误的上下文信息，比如和报错相关的变量的值。接下来我们来看看 anyhow 和 error_stack 能否帮助我们更快速的定位到错误的原因。</p>\n<h2>anyhow</h2>\n<p>anyhow 的使用方式和 <code>Box&#x3C;dyn std::error::Error></code> 非常类似，我们只需要将 <code>Box&#x3C;dyn std::error::Error></code> 替换成 <code>anyhow::Error</code> 即可。</p>\n<pre><code class=\"hljs language-diff\"><span class=\"hljs-addition\">+ use anyhow::Context;</span>\n\n<span class=\"hljs-deletion\">- fn parse_experiment(description: &#x26;str) -> Result&#x3C;(u64, u64), BoxDynError> {</span>\n<span class=\"hljs-addition\">+ fn parse_experiment(description: &#x26;str) -> Result&#x3C;(u64, u64), anyhow::Error> {</span>\n    let value = description\n        .parse()\n<span class=\"hljs-addition\">+        .context(format!(\"{description:?} could not be parsed as experiment\"))?;</span>\n\n    Ok((value, 2 * value))\n}\n\nfn start_experiments(\n    experiment_ids: &#x26;[usize],\n    experiment_descriptions: &#x26;[&#x26;str],\n) -> Result&#x3C;Vec&#x3C;u64>, anyhow::Error> {\n    let experiments = experiment_ids\n        .iter()\n        .map(|exp_id| {\n            let description = experiment_descriptions\n                .get(*exp_id)\n<span class=\"hljs-addition\">+                .context(format!(\"experiment {exp_id} has no valid description\"))?;</span>\n            let experiment = parse_experiment(description)\n<span class=\"hljs-addition\">+                .context(format!(\"experiment {exp_id} could not be parsed\"))?;</span>\n\n            Ok(move || experiment.0 * experiment.1)\n        })\n        .collect::&#x3C;Result&#x3C;Vec&#x3C;_>, anyhow::Error>>()\n<span class=\"hljs-addition\">+        .context(format!(\"unable to set up experiments\"))?;</span>\n\n    Ok(experiments.iter().map(|experiment| experiment()).collect())\n}\n\nfn main() -> Result&#x3C;(), anyhow::Error> {\n    let experiment_ids = &#x26;[0, 2];\n    let experiment_descriptions = &#x26;[\"10\", \"20\", \"3o\"];\n    start_experiments(experiment_ids, experiment_descriptions)?;\n\n    Ok(())\n}\n</code></pre>\n<blockquote>\n<p><strong>注意</strong>：上述 diff 中并没有展示所有的改动，比如有些 <code>Box&#x3C;dyn std::error::Error></code> 的改动，以及 <code>?</code> 的改动。</p>\n</blockquote>\n<p>除了将 <code>Box&#x3C;dyn std::error::Error></code> 替换成 <code>anyhow::Error</code> 之外，我们还使用了 <code>anyhow::Context</code> 来为错误添加上下文信息。</p>\n<p>运行这段代码，会得到如下的错误信息：</p>\n<pre><code class=\"language-text\">Error: unable to set up experiments\n\nCaused by:\n    0: experiment 2 could not be parsed\n    1: \"3o\" could not be parsed as experiment\n    2: invalid digit found in string\n</code></pre>\n<p>这里的错误信息多是通过 <code>context</code> 添加的上下文信息，可以看到，我们已经能够快速定位到错误的原因了： <code>3o</code> 不能被解析成数字。</p>\n<p>但我们现在不能快速定位到错误发生的具体位置，这需要 backtrace 信息。anyhow 能提供 backtrace 吗？当然可以，我们只需要在运行程序的时候，设置环境变量 <code>RUST_BACKTRACE=1</code> 即可。</p>\n<pre><code class=\"language-text\">Error: unable to set up experiments\n\nCaused by:\n    0: experiment 2 could not be parsed\n    1: \"3o\" could not be parsed as experiment\n    2: invalid digit found in string\n\nStack backtrace:\n   0: anyhow::context::&#x3C;impl anyhow::Context&#x3C;T,E> for core::result::Result&#x3C;T,E>>::context\n             at /root/.cargo/registry/src/rsproxy.cn-8f6827c7555bfaf8/anyhow-1.0.71/src/context.rs:54:31\n   1: anyhow::parse_experiment\n             at ./src/bin/anyhow.rs:4:17\n   2: anyhow::start_experiments::{{closure}}\n             at ./src/bin/anyhow.rs:21:30\n   3: core::iter::adapters::map::map_try_fold::{{closure}}\n             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/iter/adapters/map.rs:91:28\n   4: core::iter::traits::iterator::Iterator::try_fold\n             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/iter/traits/iterator.rs:2304:21\n   5: &#x3C;core::iter::adapters::map::Map&#x3C;I,F> as core::iter::traits::iterator::Iterator>::try_fold\n             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/iter/adapters/map.rs:117:9\n   6: &#x3C;core::iter::adapters::GenericShunt&#x3C;I,R> as core::iter::traits::iterator::Iterator>::try_fold\n             at /rustc/90c541806f23a127002de5b4038be731ba1458ca/library/core/src/iter/adapters/mod.rs:195:9\n...\n</code></pre>\n<blockquote>\n<p><strong>注意</strong>：如果用的是 stable 版本的 rust，需要对 anyhow 添加 \"backtrace\" feature，才能使用 backtrace 功能。</p>\n</blockquote>\n<p>虽然 anyhow 能够提供 backtrace 信息，但是这个 backtrace 信息并不是很友好，包含了太多冗余信息（比如 rust core lib 的 backtrace）。这一点，我们可以通过 error_stack 来改进。</p>\n<h2>error_stack</h2>\n<pre><code class=\"hljs language-diff\"><span class=\"hljs-addition\">+ use std::fmt;</span>\n\n<span class=\"hljs-addition\">+ use error_stack::{Context, IntoReport, Report, Result, ResultExt};</span>\n\n<span class=\"hljs-addition\">+ #[derive(Debug)]</span>\n<span class=\"hljs-addition\">+ struct ParseExperimentError;</span>\n\n<span class=\"hljs-addition\">+ impl fmt::Display for ParseExperimentError {</span>\n<span class=\"hljs-addition\">+     fn fmt(&#x26;self, fmt: &#x26;mut fmt::Formatter&#x3C;'_>) -> fmt::Result {</span>\n<span class=\"hljs-addition\">+         fmt.write_str(\"invalid experiment description\")</span>\n<span class=\"hljs-addition\">+     }</span>\n<span class=\"hljs-addition\">+ }</span>\n\n<span class=\"hljs-addition\">+ impl Context for ParseExperimentError {}</span>\n\n<span class=\"hljs-deletion\">- fn parse_experiment(description: &#x26;str) -> Result&#x3C;(u64, u64), BoxDynError> {</span>\n<span class=\"hljs-addition\">+ fn parse_experiment(description: &#x26;str) -> Result&#x3C;(u64, u64), ParseExperimentError> {</span>\n    let value = description\n        .parse()\n<span class=\"hljs-addition\">+         .into_report()</span>\n<span class=\"hljs-addition\">+         .attach_printable_lazy(|| format!(\"{description:?} could not be parsed as experiment\"))</span>\n<span class=\"hljs-addition\">+         .change_context(ParseExperimentError)?;</span>\n\n    Ok((value, 2 * value))\n}\n\n<span class=\"hljs-addition\">+ #[derive(Debug)]</span>\n<span class=\"hljs-addition\">+ struct ExperimentError;</span>\n\n<span class=\"hljs-addition\">+ impl fmt::Display for ExperimentError {</span>\n<span class=\"hljs-addition\">+     fn fmt(&#x26;self, fmt: &#x26;mut fmt::Formatter&#x3C;'_>) -> fmt::Result {</span>\n<span class=\"hljs-addition\">+         fmt.write_str(\"experiment error: could not run experiment\")</span>\n<span class=\"hljs-addition\">+     }</span>\n<span class=\"hljs-addition\">+ }</span>\n\n<span class=\"hljs-addition\">+ impl Context for ExperimentError {}</span>\n\nfn start_experiments(\n    experiment_ids: &#x26;[usize],\n    experiment_descriptions: &#x26;[&#x26;str],\n) -> Result&#x3C;Vec&#x3C;u64>, ExperimentError> {\n    let experiments = experiment_ids\n        .iter()\n        .map(|exp_id| {\n            let description = experiment_descriptions.get(*exp_id).ok_or_else(|| {\n<span class=\"hljs-addition\">+                 Report::new(ExperimentError)</span>\n<span class=\"hljs-addition\">+                     .attach_printable(format!(\"experiment {exp_id} has no valid description\"))</span>\n            })?;\n\n            let experiment = parse_experiment(description)\n<span class=\"hljs-addition\">+                 .attach_printable(format!(\"experiment {exp_id} could not be parsed\"))</span>\n<span class=\"hljs-addition\">+                 .change_context(ExperimentError)?;</span>\n\n            Ok(move || experiment.0 * experiment.1)\n        })\n        .collect::&#x3C;Result&#x3C;Vec&#x3C;_>, ExperimentError>>()\n<span class=\"hljs-addition\">+       .attach_printable(\"unable to set up experiments\")?;</span>\n\n    Ok(experiments.iter().map(|experiment| experiment()).collect())\n}\n\nfn main() -> Result&#x3C;(), ExperimentError> {\n    let experiment_ids = &#x26;[0, 2];\n    let experiment_descriptions = &#x26;[\"10\", \"20\", \"3o\"];\n    start_experiments(experiment_ids, experiment_descriptions)?;\n\n    Ok(())\n}\n</code></pre>\n<blockquote>\n<p><strong>注意</strong>：以上并不是严格的 diff，只是展示了主要的改动。</p>\n</blockquote>\n<p>运行这段代码，会得到如下的错误信息：</p>\n<pre><code class=\"language-text\">Error: experiment error: could not run experiment\n├╴at src/bin/error_stack.rs:51:18\n├╴unable to set up experiments\n│\n├─▶ invalid experiment description\n│   ├╴at src/bin/error_stack.rs:21:10\n│   ╰╴experiment 2 could not be parsed\n│\n╰─▶ invalid digit found in string\n    ├╴at src/bin/error_stack.rs:19:10\n    ╰╴\"3o\" could not be parsed as experiment\n</code></pre>\n<p>和 anyhow 相比，error_stack 需要我们编写更多的代码，但是 error_stack 提供的错误信息更加友好，给我们展示了每一个层级的错误信息，上下文信息以及错误发生的具体位置。</p>\n<hr>\n<p>总结一下，anyhow 和 error_stack 都是非常优秀的 error handling crate，都提供了友好的错误信息，可以帮助我们快速定位错误。anyhow 的优势在于它的使用非常简单，几乎不需要我们编写额外的代码。error_stack 的优势在于它的错误信息更加友好，更直观地展示了错误发生地位置，但是它的使用相对复杂一点。</p>","title":"anyhow vs error_stack: 从用户的角度来看错误处理","date":"2023-06-19"}},"__N_SSG":true}