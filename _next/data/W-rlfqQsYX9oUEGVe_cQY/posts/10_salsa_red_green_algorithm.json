{"pageProps":{"postData":{"id":"10_salsa_red_green_algorithm","contentHtml":"<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">func</span>(input: Input) <span class=\"hljs-punctuation\">-></span> Output {\n    <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n<p>当 <code>input</code> 不变的时候，我们第二次调用 <code>func</code> ，可以直接从缓存中读取结果，而不需要再次执行 <code>func</code>。</p>\n<pre><code class=\"hljs language-rust\">...\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">output1</span> = <span class=\"hljs-title function_ invoke__\">func</span>(input)\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">output2</span> = <span class=\"hljs-title function_ invoke__\">func</span>(input) <span class=\"hljs-comment\">// do not need to execute func again</span>\nassert output1 == output2\n</code></pre>\n<p>这就是所谓的增量计算，Salsa 提供了工具来帮助我们实现增量计算。</p>\n<p>实现增量计算，本质上是因为我们保存了之前的计算结果，如果对于每一个不同的 <code>input</code>，我们都保存了之前的计算结果，存储的压力会很大。</p>\n<p><img src=\"/10/input-output.png\" alt=\"\"></p>\n<p>在这种模式下，我们不知道哪些 <code>input</code> 是过期的，这些 input 除了创建时间不一样，并没有什么不同。当然，我们可以使用一些缓存替换策略（cache replacement policy）来缓解这个问题，但是我们仍然存储了多余的东西，且可能剔除了一些仍然有用的数据。</p>\n<p><img src=\"/10/input-version.png\" alt=\"\"></p>\n<p>如果我们给 input 分组呢？我们可以为每一个 <code>input</code> 分配一个版本号，当 <code>input</code> 发生变化的时候，我们就更新版本号。这样，我们就可以知道哪些 <code>input</code> 是过期的了。</p>\n<p>对于之前的模式，我们的代码可能是这样的：</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">input1</span> = Input { ... }\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">output1</span> = <span class=\"hljs-title function_ invoke__\">func</span>(input1)\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">input2</span> = Input { ... }\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">output2</span> = <span class=\"hljs-title function_ invoke__\">func</span>(input2)\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">input3</span> = Input { ... }\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">output3</span> = <span class=\"hljs-title function_ invoke__\">func</span>(input3)\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">input4</span> = Input { ... }\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">output4</span> = <span class=\"hljs-title function_ invoke__\">func</span>(input4)\n</code></pre>\n<p>如果将 input 分组的话，我们的代码可能是这样的：</p>\n<pre><code class=\"hljs language-rust\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">input1</span> = Input { ... } <span class=\"hljs-comment\">// input 1 version 1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">output1</span> = <span class=\"hljs-title function_ invoke__\">func</span>(input1)\n<span class=\"hljs-title function_ invoke__\">change_input</span>(&#x26;<span class=\"hljs-keyword\">mut</span> input1) <span class=\"hljs-comment\">// input 1 version 2</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">output1</span> = <span class=\"hljs-title function_ invoke__\">func</span>(input1) <span class=\"hljs-comment\">// we can safely remove the data stored for input 1 version 1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">input2</span> = Input { ... } <span class=\"hljs-comment\">// input2 version 1</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">output2</span> = <span class=\"hljs-title function_ invoke__\">func</span>(input2) \n<span class=\"hljs-title function_ invoke__\">change_input</span>(&#x26;<span class=\"hljs-keyword\">mut</span> input2) <span class=\"hljs-comment\">// input2 version 2</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\"></span><span class=\"hljs-variable\">output2</span> = <span class=\"hljs-title function_ invoke__\">func</span>(input2) <span class=\"hljs-comment\">// we can safely remove the data stored for input 2 version 1</span>\n</code></pre>\n<p>简单来说，我们并不会为每个不同的 input 都构造 <code>Input</code> 实例，而是将 input 分组，每个分组只有一个 <code>Input</code> 实例，这个实例的版本号会随着 input 的变化而变化。这样的好处是，我们可以安全地删除同一个分组中过期（低版本）的 input，以及该 input 对应的计算结果。<strong>当然我们的前提假设是，我们对同一分组中旧的 input 不感兴趣.</strong></p>","title":"Salsa: The red-green Algorithm","date":"2022-12-02"}},"__N_SSG":true}