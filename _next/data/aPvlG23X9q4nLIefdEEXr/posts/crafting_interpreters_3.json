{"pageProps":{"postData":{"id":"crafting_interpreters_3","contentHtml":"<p><a href=\"http://www.craftinginterpreters.com/\">《Crafting Interpreters》</a>中 clox（Part 2 中用 C 实现的 Lox 语言）实现了 <a href=\"http://www.craftinginterpreters.com/compiling-expressions.html#a-pratt-parser\">Pratt Parser</a>。<a href=\"crafting_interpreters_2\">上一篇文章</a>讲了 RD（Recursive Descent Parsing），个人感觉 Pratt Parsing 也是属于 RD 的，是 RD 的一个改进。</p>\n<p>上篇文章中提到了 parsing 要解决的两个问题</p>\n<ul>\n<li>不同运算符的优先级，比如 <code>*</code> 比 <code>+</code> 的优先级高，<code>1 + 2 * 3</code> 应该被 parse 为 <code>1 + (2 * 3)</code></li>\n<li>Associativity，比如 <code>+</code> 是 left-associative 的， <code>1 + 2 + 3</code> 应该被 parse 为 <code>(1 + 2) + 3</code>，而赋值 <code>=</code> 是 right-associative 的，<code>a = b = c</code> 应该被 parse 为 <code>a = (b = c)</code>。</li>\n</ul>\n<p>RD 中每个优先级都在语法规则中占一个 level，对应到代码中，每个优先级都会对应一个单独的函数，优先级低的函数先被调用，每个函数都会调用比自己优先级更高一级的函数，通过这种方式解决不同运算符的优先级问题。至于 Associativity，是通过是否在函数中递归调用自身解决的。</p>\n<p>当语法写成下面这种形式时，表示 Int 比 Plus 的优先级高，函数 plus 会调用 int，且 <code>+</code> 是 left-associative 的。</p>\n<pre><code>Plus -> Int {+ Int }\n</code></pre>\n<p>把语法改下，写成</p>\n<pre><code>Plus -> Int + Plus\n</code></pre>\n<p>这样的话，函数 plus 不仅会调用 int，还会调用自身。Int 的优先级仍然比 Plus 高，但是 <code>+ </code>变成了 right-associative 的。</p>\n<p>RD 对语法的定义很严格，得很小心的去写，避免把 left-associative 和 right-associative 搞错。你还得很小心的写，避免弄出 left recursion。。。比如不能写成下面这样</p>\n<pre><code>Plus -> Plus + Int\n</code></pre>\n<p>另外，RD 每个优先级都对应一个函数，运行效率很低，即使只是 parse 一个 token，也需要调用多个层级的函数。</p>\n<p>Pratt Parsing 很优雅的解决了 RD 中的这些问题，没有那么多层级，通过比较当前运算符和上一个运算符的优先级来确定哪个运算符应该先算。</p>\n<pre><code>  1   +   2   *   3\n0   1   1   2   2   0\n</code></pre>\n<p>同样通过给运算符左右两侧赋予不一样的值，就可以实现 left-associative 和 right-associative</p>\n<pre><code>  1     +     2     +   3\n0   1.1    1    1.1   1   0\n</code></pre>\n<p>对于 Pratt Parsing，我发现了一篇神文，看过几篇写 Pratt Parsing 的文章，没有哪一篇将 Pratt Parsing 写得如此清晰。</p>\n<p><a href=\"https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html\">Simple but Powerful Pratt Parsing</a></p>\n<p>作者是 rust-analyzer 的作者 matklad，rust-analyzer 中的 parser 用的就是 Pratt Parsing。</p>\n<p>比较好笑的是 matklad 说写这篇文章的原因是他经常看不懂自己在 rust-analyzer 中写的 pratt parsing 代码</p>\n<blockquote>\n<p>Understanding the algorithm myself for hopefully the last time. I’ve implemented a production-grade Pratt parser once, but I no longer immediately understand that code :-)</p>\n</blockquote>\n<p>既然 matklad 已经写得这么好了，我就没必要再写了:-），主要还是因为懒，写这个真的很费劲。另外感觉自己也没有啥额外的东西可写，写的话很可能写成 matklad 文章的翻译。</p>\n<p>上篇文章用 RD 实现了加减乘除计算器的 parser，这里贴一下 Pratt Parsing 的实现，代码很简单，看看有助于理解</p>\n<pre><code class=\"hljs language-Rust\"><span class=\"hljs-keyword\">use</span> std::fmt;\n<span class=\"hljs-keyword\">use</span> std::iter::Peekable;\n\n<span class=\"hljs-meta\">#[derive(Debug, Clone)]</span>\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Token</span> {\n    <span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-type\">u32</span>),\n    Plus,\n    Minus,\n    Star,\n    Slash,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">fmt</span>::Display <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Token</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fmt</span>(&#x26;<span class=\"hljs-keyword\">self</span>, f: &#x26;<span class=\"hljs-keyword\">mut</span> fmt::Formatter&#x3C;<span class=\"hljs-symbol\">'_</span>>) <span class=\"hljs-punctuation\">-></span> fmt::<span class=\"hljs-type\">Result</span> {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span> {\n            Token::<span class=\"hljs-title function_ invoke__\">Number</span>(n) => <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">\"{}\"</span>, n),\n            Token::Plus => <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">\"+\"</span>),\n            Token::Minus => <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">\"-\"</span>),\n            Token::Star => <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">\"*\"</span>),\n            Token::Slash => <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">\"/\"</span>),\n        }\n    }\n}\n\n<span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Expr</span> {\n    <span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-type\">u32</span>),\n    <span class=\"hljs-title function_ invoke__\">Binary</span>(<span class=\"hljs-type\">Box</span>&#x3C;Expr>, Token, <span class=\"hljs-type\">Box</span>&#x3C;Expr>),\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-title class_\">fmt</span>::Display <span class=\"hljs-keyword\">for</span> <span class=\"hljs-title class_\">Expr</span> {\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fmt</span>(&#x26;<span class=\"hljs-keyword\">self</span>, f: &#x26;<span class=\"hljs-keyword\">mut</span> fmt::Formatter&#x3C;<span class=\"hljs-symbol\">'_</span>>) <span class=\"hljs-punctuation\">-></span> fmt::<span class=\"hljs-type\">Result</span> {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span> {\n            Expr::<span class=\"hljs-title function_ invoke__\">Number</span>(n) => <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">\"{}\"</span>, n),\n            Expr::<span class=\"hljs-title function_ invoke__\">Binary</span>(lhs, token, rhs) => {\n                <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">\"({} \"</span>, lhs)?;\n                <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">\"{} \"</span>, token)?;\n                <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">\"{})\"</span>, rhs)\n            }\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">expr_bp</span>&#x3C;I: <span class=\"hljs-built_in\">Iterator</span>&#x3C;Item = Token>>(token_iter: &#x26;<span class=\"hljs-keyword\">mut</span> Peekable&#x3C;I>, min_bp: <span class=\"hljs-type\">u8</span>) <span class=\"hljs-punctuation\">-></span> Expr {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">lhs</span> = <span class=\"hljs-keyword\">match</span> token_iter.<span class=\"hljs-title function_ invoke__\">peek</span>() {\n        <span class=\"hljs-title function_ invoke__\">Some</span>(Token::<span class=\"hljs-title function_ invoke__\">Number</span>(it)) => Expr::<span class=\"hljs-title function_ invoke__\">Number</span>(*it),\n        <span class=\"hljs-title function_ invoke__\">Some</span>(token) => <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"bad token: {:?}\"</span>, token),\n        <span class=\"hljs-literal\">None</span> => <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"no more tokens left\"</span>),\n    };\n    token_iter.<span class=\"hljs-title function_ invoke__\">next</span>();\n\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Some</span>(token) = token_iter.<span class=\"hljs-title function_ invoke__\">peek</span>().<span class=\"hljs-title function_ invoke__\">cloned</span>() {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">Token</span>::<span class=\"hljs-title function_ invoke__\">Number</span>(_) = token {\n            <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"bad token: {:?}\"</span>, token)\n        }\n\n        <span class=\"hljs-keyword\">let</span> (l_bp, r_bp) = <span class=\"hljs-title function_ invoke__\">infix_binding_power</span>(token.<span class=\"hljs-title function_ invoke__\">clone</span>());\n        <span class=\"hljs-keyword\">if</span> l_bp &#x3C; min_bp {\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        token_iter.<span class=\"hljs-title function_ invoke__\">next</span>();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">rhs</span> = <span class=\"hljs-title function_ invoke__\">expr_bp</span>(token_iter, r_bp);\n        lhs = Expr::<span class=\"hljs-title function_ invoke__\">Binary</span>(<span class=\"hljs-type\">Box</span>::<span class=\"hljs-title function_ invoke__\">new</span>(lhs), token.<span class=\"hljs-title function_ invoke__\">clone</span>(), <span class=\"hljs-type\">Box</span>::<span class=\"hljs-title function_ invoke__\">new</span>(rhs));\n    }\n    lhs\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">infix_binding_power</span>(op: Token) <span class=\"hljs-punctuation\">-></span> (<span class=\"hljs-type\">u8</span>, <span class=\"hljs-type\">u8</span>) {\n    <span class=\"hljs-keyword\">match</span> op {\n        Token::Plus | Token::Minus => (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>),\n        Token::Star | Token::Slash => (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>),\n        _ => <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"bad op: {:?}\"</span>, op),\n    }\n}\n\n<span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">tests</span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tokens</span> = <span class=\"hljs-built_in\">vec!</span>[\n        Token::<span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-number\">1</span>),\n        Token::Plus,\n        Token::<span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-number\">2</span>),\n        Token::Slash,\n        Token::<span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-number\">3</span>),\n    ];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">s</span> = <span class=\"hljs-title function_ invoke__\">expr_bp</span>(&#x26;<span class=\"hljs-keyword\">mut</span> tokens.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">peekable</span>(), <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert_eq!</span>(s.<span class=\"hljs-title function_ invoke__\">to_string</span>(), <span class=\"hljs-string\">\"(1 + (2 / 3))\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">tokens</span> = <span class=\"hljs-built_in\">vec!</span>[\n        Token::<span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-number\">1</span>),\n        Token::Minus,\n        Token::<span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-number\">2</span>),\n        Token::Plus,\n        Token::<span class=\"hljs-title function_ invoke__\">Number</span>(<span class=\"hljs-number\">3</span>),\n    ];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">s</span> = <span class=\"hljs-title function_ invoke__\">expr_bp</span>(&#x26;<span class=\"hljs-keyword\">mut</span> tokens.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">peekable</span>(), <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert_eq!</span>(s.<span class=\"hljs-title function_ invoke__\">to_string</span>(), <span class=\"hljs-string\">\"((1 - 2) + 3)\"</span>);\n</code></pre>","title":"《Crafting Interpreters》阅读笔记（三）","date":"2021-10-24"}},"__N_SSG":true}